h1. EC2 on Rails


h2. Deploy a Ruby on Rails app on EC2 in five minutes

EC2 on Rails is an Ubuntu Linux server image for 
"Amazon's EC2 hosting service":http://www.amazon.com/b/ref=sc_fe_l_2/102-6342260-7987311?ie=UTF8&node=201590011&no=3435361
that's ready to run a standard Ruby on Rails application with little or no customization. 
It's a Ruby on Rails "virtual appliance":http://en.wikipedia.org/wiki/Virtual_appliance.

If you have an EC2 account and a public keypair you're five minutes away from deploying
your Rails app.

_Deploying a simple rails app is simple, and complex customization (if required) is possible._

Features of the EC2 image:

* Ready to deploy a Rails app with little or no configuration of the server required.
* Automatic backup of MySQL database to S3.
* Capistrano tasks to customize the server image, archive and restore the database to/from S3, and more (available as a rubygem).
* Mongrel_cluster behind Apache 2.2, configured according to 
  "Coda Hale's excellent guide":http://blog.codahale.com/2006/06/19/time-for-a-grown-up-server-rails-mongrel-apache-capistrano-and-you/
  with /etc/init.d startup script
* Ruby on Rails 1.2.5
* Ruby 1.8.6
* MySQL 5
* Ubuntu 7.10 "Gutsy" with "Xen versions of standard libs":http://wiki.xensource.com/xenwiki/XenSpecificGlibc ("libc6-xen":http://packages.ubuntu.com/feisty/libs/libc6-xen package).
* Amazon AMI tools installed
* A script to rebundle a customized version of the image in one step if required
* MySQL and Apache configured to write logs to /mnt/log so you don't fill up EC2's small root filesystem
* 32-bit and 64-bit images available (supports all instance types, small to extra large).
* Created using a publicly available (GPL) build file.
* Multiple instance support (though it's still experimental, not fully tested yet).


h2. Using the image

This documentation will be improved soon, for now hopefully this covers the basics.

h4. 1. Install the gem

<pre>sudo gem install ec2onrails</pre>

h4. 2. Add the config files to your Rails app

Put "Capfile":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/Capfile 
in the root of your rails folder, and put
"deploy.rb":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/deploy.rb 
and
"s3.yml":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/s3.yml
in the config folder.

Be sure to customize those files and read the comments.

Also, if you're using a separate instance for the database, use the hostname "db_primary"
in your database.yml file. After running "cap ec2onrails:server:set_roles" it will resolve
to the instance defined in your Capistrano "db" role.

h4. 4. Start up one or more instances of the image.

Soon there will be a Capistrano task to do this for you. In the meantime read the 
"running an instance section":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html
in Amazon's getting started guide.

The image id's of the current images are:
* 32-bit: *ami-73c1241a*.
* 64-bit: *ami-72c1241b*.

(Please read the change log below for release notes. NOTE: multiple 
instance support isn't fully tested yet, look for version 1.0 soon!)

As is "standard for public AMI's":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/DeveloperGuide/public-ami-guidelines.html, 
password-based logins are disabled. You log in with your own 
"public/private keypair":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html.

Most basic things can be configured automatically by the Capistrano tasks, but if you want to 
you can login by ssh as a user named "admin" (has sudo ability) or as "app" (the user 
that the app runs as, does not have sudo ability). The Capistrano tasks automatically 
use the app user use to deploy the app, and the admin user for server admin tasks 
that require sudo.

Double-check "your firewall settings":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html. 
Be sure that you haven't allowed public access to any ports other than TCP 22 and TCP 80.
If you're using multiple instances, be sure to allow them network access to each other.


h4. 5. Deploy the app with Capistrano

<pre>
cap ec2onrails:setup
cap deploy:migrations
</pre>

Yes, it's that easy! The setup task will set the server's timezone, install any 
gems and Ubuntu packages that you specified in the config file, and 
create your production database.

That's it, you're done.

h2. Capistrano tasks

I'll post full documentation for the Capistrano tasks soon, in the meantime here's a brief summary:

Server config tasks. These run as the admin user. You can specify lists of
gems and Ubuntu packages to be installed. The deploy_files task uploads
files to the server (they will be owned by root). It's intended mainly for
customized config files for new packages installed via the install_packages
task.
* ec2onrails:server:deploy_files
* ec2onrails:server:set_timezone
* ec2onrails:server:upgrade_gems
* ec2onrails:server:upgrade_packages
* ec2onrails:server:install_gems
* ec2onrails:server:install_packages
* ec2onrails:server:upgrade_and_install_all
* ec2onrails:server:restart_services
* ec2onrails:server:set_roles
- Customizes each instance for it's role(s) (as defined in your Capistrano deploy.rb file).
For now this just makes sure that only the appropriate services (Apache, Mongrel, and/or MySQL)
are running. Eventually this will customize settings for the running services also. Note that
an instance can have more than one role. If there's only one instance it will have all roles.

Database management tasks: archive and restore can operate on any specified S3 bucket. 
For example, I use this to restore the current production data (from my actual production backup
bucket) onto a staging server that has the current production version of my
app. I then deploy the new version which tests migrations exactly as they'll
run on the production server.
* ec2onrails:db:archive
* ec2onrails:db:restore
* ec2onrails:db:create
* ec2onrails:db:drop
* ec2onrails:db:recreate
* ec2onrails:db:set_root_password

* ec2onrails:ami_ids
- Shows the AMI id's of the images that match the current version of the gem.

* ec2onrails:setup
- This is a convenience task to get a new instance completely set up in one
step, everything except deploying the app.

* ec2onrails:restore_db_and_deploy
- Another convenience task to recreate the db, restore data to it from an s3
bucket and deploy the app, useful to set up a staging server.


h2. Saving your own customized version of the image.

I'm trying to make the image configurable enough that you won't need to do this, but 
if you want to save a customized version of the image, there is a script to do it: 
<code>/usr/local/ec2onrails/bin/rebundle.sh</code>. It takes a long time and there 
are long periods with no output so you might want to hit a key once in a while 
(or set "ServerAliveInterval 60" in your ssh_config file) to avoid being disconnected 
while it's running.

It expects a directory, /mnt/aws-config, that contains a config file and your AWS 
access identifiers. The contents of the directory are the following three files:

* cert-XXXX.pem and pk-XXXX.pem. These are the X.509 certificate and private key files from your Amazon access key identifiers.
* A file named config. It's contents should look like the following:

<pre>
AWS_ACCOUNT_ID=1234-1234-1234
KEY_FILE_NAME=pk-XXXX.pem
CERT_FILE_NAME=cert-XXXX.pem
AWS_ACCESS_KEY_ID=ABC0123
AWS_SECRET_ACCESS_KEY=abc0123abc0123abc0123
BUCKET_BASE_NAME=a-string-identifier
</pre>


h2. Building the image

Building the image is not required, most people will simply use the prebuilt public
image, but there is also a Rake build script that builds the image, and optionally bundles 
and uploads it to S3. 
It should run on any Linux system, including one of the stock Fedora-based Amazon public AMI's 
(it is tested on "Amazon's FC6 x86_64 image":http://developer.amazonwebservices.com/connect/entry.jspa?externalID=994&categoryID=101).


h2. Mailing lists

There are two Google groups, one for 
"announcements":http://groups.google.com/group/ec2-on-rails-announce
and one for 
"discussion":http://groups.google.com/group/ec2-on-rails-discuss.


h2. Comments

Comments are welcome. Send an email to "Paul Dowman":http://pauldowman.com/contact/ 
or to the "Google group":http://groups.google.com/group/ec2-on-rails-discuss.
If you find bugs please file them 
"here":http://rubyforge.org/tracker/?atid=17558&group_id=4552&func=browse 
or send me an "email":http://pauldowman.com/contact/.


h2. Change log

Also see the "list of open issues":http://rubyforge.org/tracker/?atid=17558&group_id=4552&func=browse.


h4. 0.9.4, ami-73c1241a (32-bit) and ami-72c1241b (64-bit)

7 Oct, 2007
* This is another test release, still not intended to be production-ready until it's tested more thoroughly. Look for version 1.0.
* Ubuntu 7.10/Gutsy
* Experimental multiple instance support.
** *Mongrel & MySQL now listen on all ports.* Be sure your firewall settings are correct, and set a MySQL root password.
* RDoc and RI not generated for installed gems.
* No longer upgrades packages & gems on ec2onrails:server:setup task.
* 32-bit and 64-bit images.
* EC2 AMI tools version 2007-08-29.
* NTP removed, it's no longer needed under Xen.
* MySQL data dir dirs now under /mnt.
* syslog now logs to /mnt/log.
* Build now cleans apt cache, image is now 1/2 the size.


h4. 0.9.3, ami-a3f91cca

23 Oct, 2007
* This is another test release, still not intended to be production-ready until it's tested more thoroughly. Look for version 1.0.
* There is now a rubygem available with Capistrano tasks.
* "admin" user added, server admin cap tasks run as this user
* MySQL settings tweaked to reflect large amount of RAM available on EC2 instances.
* "http://code.google.com/p/ec2-on-rails/issues/list?can=1&q=label%3AFixed-in-0_9_3":issues fixed in this release

h4. 0.9.2, ami-0cf61365

13 Sept, 2007
* This is another test release, still not intended to be production-ready until it's tested more thoroughly. Look for version 1.0.
* "http://code.google.com/p/ec2-on-rails/issues/list?can=1&q=label%3AFixed-in-0_9_2":issues fixed in this release

h4. 0.9.1, ami-99f712f0

11 Sept, 2007
* This is another test release, still not intended to be production-ready until it's tested more thoroughly. Look for version 1.0.
* Fixed permissions on /var/lib/dhcp3
* "http://code.google.com/p/ec2-on-rails/issues/list?can=1&q=label%3AFixed-in-0_9_1":issues fixed in this release

h4. 0.9.0, ami-bdf411d4

7 Sept 2007
* First release built with new rake build script, this is a test release, not intended to be production-ready until it's tested more thoroughly.
* Amazon EC2 API tools (java-based) no longer installed by default because they're not used on most servers. They're needed only for registering a rebundled image so there's now a script to install them: /usr/local/ec2-on-rails/install_ec2_api_tools.sh. The ruby-based EC2 image tools are still installed.
* Removed "http://packages.ubuntu.com/feisty/libs/sun-java6-jre":Java and it's massive list of dependencies because it was only needed for the EC2 API tools. This saved a huge amount of space.
* Removed ImageMagick, RMagick and hpricot due to popular demand. There will soon be cap2 tasks to customize which packages and gems are installed.

h4. 0.8.1, ami-b79a7fde

29 July 2007
* Fixed S3 backup cron job.
* Added script to restore data from S3 (/usr/local/aws/bin/restore_app_db.rb). This is useful when setting up a staging server to test your deployment, you can have it set up with a copy of your production data to test your migrations.
* Rewrite rule now allows images/css on maintenance page
* Added empty /etc/apache2/sites-available/app.custom for custom Apache configuration in a separate file (so it can be deployed by rsync more easily).
* Added ImageMagick, RMagick and hpricot due to popular demand.

h4. 0.8.0, ami-4e907527

20 June 2007
* Initial release.


h2. How to submit patches

Read the "8 steps for fixing other people's code":http://drnicwilliams.com/2007/06/01/8-steps-for-fixing-other-peoples-code/ and for section "8b: Submit patch to Google Groups":http://drnicwilliams.com/2007/06/01/8-steps-for-fixing-other-peoples-code/#8b-google-groups, use the Google Group above.

The trunk repository is <code>svn://rubyforge.org/var/svn/ec2onrails/trunk</code> for anonymous access.


h2. License

This code is free to use under the terms of the GPL v2. 
