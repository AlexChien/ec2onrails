h1. EC2 on Rails


h2. Deploy a Ruby on Rails app on EC2 in five minutes

EC2 on Rails is an Ubuntu Linux server image for 
"Amazon's EC2 hosting service":http://www.amazon.com/b/ref=sc_fe_l_2/102-6342260-7987311?ie=UTF8&node=201590011&no=3435361
that's ready to run a standard Ruby on Rails application with little or no customization. 
It's a Ruby on Rails "virtual appliance":http://en.wikipedia.org/wiki/Virtual_appliance.

If you have an EC2 account and a public keypair you're five minutes away from deploying
your Rails app.

_Deploying a simple rails app is simple, and complex customization (if required) is possible._

Features of the EC2 image:

* Ready to deploy a Rails app with little or no configuration of the server required
* Automatic backup of MySQL database to S3 (full backup nightly + incremental backup using binary logs every 10 minutes)
* Capistrano tasks to customize the server image, archive and restore the database to/from S3, and more (available as a rubygem)
* Mongrel_cluster behind Apache 2.2, configured according to 
  "Coda Hale's excellent guide":http://blog.codahale.com/2006/06/19/time-for-a-grown-up-server-rails-mongrel-apache-capistrano-and-you/
* Ruby on Rails 2.0.2 and 1.2.6
* Ruby 1.8.6
* MySQL 5
* "memcached":http://www.danga.com/memcached/
* "monit":http://www.tildeslash.com/monit/ system monitoring
* Ubuntu 7.10 "Gutsy" base image built using "Eric Hammond's EC2 Ubuntu script":http://alestic.com/
* SSL support
* Amazon AMI tools installed
* A script to rebundle a customized version of the image in one step if required
* MySQL, Apache, and syslog configured to use /mnt for data and logging so you don't fill up EC2's small root filesystem
* Automatically archives Rails and Apache logs to S3 nightly.
* 32-bit and 64-bit images available (supports all instance types, small to extra large).
* Created using a build file, full source is "available":http://rubyforge.org/scm/?group_id=4552 (the EC2 on Rails script is run from "Eric Hammond's EC2 Ubuntu script":http://alestic.com/)
* Supports multiple instances
* Automatically runs hourly, daily, weekly and monthly scripts if they exist in Rails application's script directory
* Local SMTP server (postfix)


h2. Using the image

This documentation will be improved soon, for now hopefully this covers the basics. 
For the AMI id's of the current images see the "change log":http://ec2onrails.rubyforge.org/svn/trunk/gem/History.txt.


h4. 1. Install the gem

<pre>sudo gem install ec2onrails</pre>

h4. 2. Add the config files to your Rails app

Put "Capfile":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/Capfile 
in the root of your rails folder, and put
"deploy.rb":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/deploy.rb 
and
"s3.yml":http://ec2onrails.rubyforge.org/svn/trunk/documentation/examples/s3.yml
in the config folder.

Be sure to customize those files and read the comments.

Also, if you're using a separate instance for the database, use the hostname "db_primary"
in your database.yml file. After running "cap ec2onrails:server:set_roles" it will resolve
to the instance defined in your Capistrano "db" role.

h4. 4. Start up one or more instances of the image.

There is nothing EC2 on Rails-specific here yet (though soon there will be a Capistrano task to do this for you), 
if you've started EC2 instances before you can skip this section. Otherwise, I'm not going to lie, this part is complicated
the first time.

Read the 
"running an instance section":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html
in Amazon's getting started guide.

For the AMI id's of the current images see the "change log":http://ec2onrails.rubyforge.org/svn/trunk/gem/History.txt
or do <code>cap ec2onrails:ami_ids</code> from within the app that you configured in the previous step.

_NOTE: Only use the images that match the current version of the gem._

Please see the "change log":http://ec2onrails.rubyforge.org/svn/trunk/gem/History.txt for release notes, and 
see the "list of open issues":http://rubyforge.org/tracker/?atid=17558&group_id=4552&func=browse.

As is "standard for public AMI's":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/DeveloperGuide/public-ami-guidelines.html, 
password-based logins are disabled. You log in with your own 
"public/private keypair":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html.

Most basic things can be configured automatically by the Capistrano tasks, but if you want to 
you can login by ssh as a user named "admin" (has sudo ability) or as "app" (the user 
that the app runs as, does not have sudo ability). The Capistrano tasks automatically 
use the app user to deploy the app, and the admin user for server admin tasks 
that require sudo.

Double-check "your firewall settings":http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/running-an-instance.html. 
Be sure that you haven't allowed public access to any ports other than TCP 22 and TCP 80.
If you're using multiple instances, be sure to allow them network access to each other.


h4. 5. Copy your public key from the server to keep Capistrano happy

This is a workaround for a quirk in Capistrano. Technically all you should need to connect to the server is the private 
key file, the public key is on the server. But for some reason 
"Capistrano requires that you have both the public key and the private key files together on the client":http://groups.google.com/group/capistrano/browse_thread/thread/1102208ff925d18.

There is a Capistrano task that tries to fix this for you. From within the root of your rails app do:

<pre>cap ec2onrails:get_public_key_from_server</pre>

Note, this will only work if you have an external ssh command in the path, it won't work for most Windows users.


h4. 6. Deploy the app with Capistrano

Now that the gem is installed, your deploy.rb is configured and you can start and stop EC2 instances, this is the only thing you'll need to do from now on.

<pre>
cap ec2onrails:setup
cap deploy:cold
</pre>

Yes, it's that easy! The setup task will set the server's timezone, install any 
gems and Ubuntu packages that you specified in the config file, and 
create your database.

That's it, your app is now running on EC2!!

h2. Capistrano tasks

I'll post full documentation for the Capistrano tasks soon, in the meantime here's a brief summary:

Server config tasks. These run as the admin user. You can specify lists of
gems and Ubuntu packages to be installed. The deploy_files task uploads
files to the server (they will be owned by root). It's intended mainly for
customized config files for new packages installed via the install_packages
task.
* <code>cap ec2onrails:server:deploy_files</code>
* <code>cap ec2onrails:server:set_timezone</code>
* <code>cap ec2onrails:server:upgrade_gems</code>
* <code>cap ec2onrails:server:upgrade_packages</code>
* <code>cap ec2onrails:server:install_gems</code>
* <code>cap ec2onrails:server:install_packages</code>
* <code>cap ec2onrails:server:upgrade_and_install_all</code>
* <code>cap ec2onrails:server:restart_services</code>
* <code>cap ec2onrails:server:set_roles</code>
- Customizes each instance for it's role(s) (as defined in your Capistrano deploy.rb file).
For now this just makes sure that only the appropriate services (Apache, Mongrel, and/or MySQL)
are running. Eventually this will customize settings for the running services also. Note that
an instance can have more than one role. If there's only one instance it will have all roles.

Database management tasks: archive and restore can operate on any specified S3 bucket. 
For example, I use this to restore the current production data (from my actual production backup
bucket) onto a staging server that has the current production version of my
app. I then deploy the new version which tests migrations exactly as they'll
run on the production server.
* <code>cap ec2onrails:db:archive</code>
* <code>cap ec2onrails:db:restore</code>
* <code>cap ec2onrails:db:create</code>
* <code>cap ec2onrails:db:drop</code>
* <code>cap ec2onrails:db:recreate</code>
* <code>cap ec2onrails:db:set_root_password</code>

* <code>cap ec2onrails:ami_ids</code>
- Shows the AMI id's of the images that match the current version of the gem.

* <code>cap ec2onrails:setup</code>
- This is a convenience task to get a new instance completely set up in one
step, everything except deploying the app.

* <code>cap ec2onrails:restore_db_and_deploy</code>
- Another convenience task to recreate the db, restore data to it from an s3
bucket and deploy the app, useful to set up a staging server.

To get a full list of the Capistrano tasks at any time type <code>cap -T</code> from with your rails app root.


h2. Saving your own customized version of the image.

I'm trying to make the image configurable enough that you won't need to do this, but 
if you want to save a customized version of the image, there is a script to do it: 
<code>/usr/local/ec2onrails/bin/rebundle.sh</code>. It takes a long time and there 
are long periods with no output so you might want to hit a key once in a while 
(or set "ServerAliveInterval 60" in your ssh_config file) to avoid being disconnected 
while it's running.

It expects a directory, /mnt/aws-config, that contains a config file and your AWS 
access identifiers. The contents of the directory are the following three files:

* cert-XXXX.pem and pk-XXXX.pem. These are the X.509 certificate and private key files from your Amazon access key identifiers.
* A file named config. It's contents should look like the following:

<pre>
AWS_ACCOUNT_ID=1234-1234-1234
KEY_FILE_NAME=pk-XXXX.pem
CERT_FILE_NAME=cert-XXXX.pem
AWS_ACCESS_KEY_ID=ABC0123
AWS_SECRET_ACCESS_KEY=abc0123abc0123abc0123
BUCKET_BASE_NAME=a-string-identifier
</pre>


h2. Building the image

Building the image is not required, most people will simply use the prebuilt public
image, but there is also a Rake build script that builds the image, and optionally bundles 
and uploads it to S3. 
It should run on any Linux system, including one of the stock Fedora-based Amazon public AMI's 
(it is tested on "Amazon's FC6 x86_64 image":http://developer.amazonwebservices.com/connect/entry.jspa?externalID=994&categoryID=101).


h2. Mailing lists

There are two Google groups, one for 
"announcements":http://groups.google.com/group/ec2-on-rails-announce
and one for 
"discussion":http://groups.google.com/group/ec2-on-rails-discuss.


h2. Comments

Comments are welcome. Send an email to "Paul Dowman":http://pauldowman.com/contact/ 
or to the "Google group":http://groups.google.com/group/ec2-on-rails-discuss.
If you find bugs please file them 
"here":http://rubyforge.org/tracker/?atid=17558&group_id=4552&func=browse 
or send me an "email":http://pauldowman.com/contact/.


h2. Change log

See the "change log":http://ec2onrails.rubyforge.org/svn/trunk/gem/History.txt.


h2. How to submit patches

Pleae read the "8 steps for fixing other people's code":http://drnicwilliams.com/2007/06/01/8-steps-for-fixing-other-peoples-code/.
The source code can be checked out anonymously using: 
<pre>
svn checkout http://ec2onrails.rubyforge.org/svn/trunk ec2onrails
</pre>

Patches can be submitted to the "RubyForge Tracker":http://rubyforge.org/tracker/?atid=17560&group_id=4552&func=browse 
or "emailed directly to me":http://pauldowman.com/contact/ .

h2. License

This code is free to use under the terms of the GPL v2. 

If you find EC2 on Rails useful please "recommend Paul Dowman":http://www.workingwithrails.com/person/10131-paul-dowman
at Working With Rails.
